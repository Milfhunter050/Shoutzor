<?php

namespace Xorinzor\Shoutzor\App\Liquidsoap;

use Pagekit\Application as App;
use Exception;
use Symfony\Component\Process\Exception\ProcessFailedException;
use Symfony\Component\Process\Process;

class LiquidsoapManager {

    //The directory where our liquidsoap files and scripts are located
    private $liquidsoapDirectory;
    private $wrapperConnection;
    private $shoutzorConnection;
    private $validTypes = array('wrapper', 'shoutzor');

    public function __construct() {
        $config = App::module('shoutzor')->config('liquidsoap');

        $this->liquidsoapDirectory = realpath(__DIR__ . '/../../../../shoutzor-requirements/liquidsoap/') . '/';

        //Default values
        $this->wrapperConnection = null;
        $this->shoutzorConnection = null;

        try {
            $this->wrapperConnection = new LiquidsoapCommunicator($config['socketPath'] . '/wrapper');
            $this->shoutzorConnection = new LiquidsoapCommunicator($config['socketPath'] . '/shoutzor');
        } catch(Exception $e) {
            //One of the connections is down
        }
    }

    public function __destruct() {
    }

    /**
     * Makes sure the requested connection is valid and connected
     * returns false if something is wrong
     */
    private function getConnection($type) {
        if($type == 'wrapper' && $this->wrapperConnection !== null)
        {
            return $this->wrapperConnection;
        }
        elseif($type == 'shoutzor' && $this->shoutzorConnection !== null)
        {
            return $this->shoutzorConnection;
        }
        else
        {
            return false;
        }
    }

    public function setVolume($type, $volume) {
        if($conn = $this->getConnection($type)) {
            return $conn->command('sound.volume 0 '.$volume);
        } else {
            return false;
        }
    }

	public function nextTrack() {
        if($conn = $this->getConnection('shoutzor')) {
            return $conn->command('shoutzorqueue.skip');
        } else {
            return false;
        }
    }

    public function queueTrack($filename) {
        if($conn = $this->getConnection('shoutzor')) {
            return $conn->command('shoutzorqueue.push '.$filename);
        } else {
            return false;
        }
    }

    public function isUp($type) {
        if($conn = $this->getConnection($type)) {
            return $conn->command('uptime');
        } else {
            return false;
        }
    }

    public function startScript($type) {
        if(in_array($type, $this->validTypes) === false) {
            return false;
        }

        if($this->isUp($type) !== false) {
            return true;
        }

        //@TODO - IT NO WORK!
        $process = new Process("nohup screen -dmS $type liquidsoap " . $this->liquidsoapDirectory . "$type.liq 2>&1");
        try {
            $process->mustRun();

            echo $process->getOutput();
        } catch (ProcessFailedException $e) {
            echo $e->getMessage();
        }

        //Give the script a moment to start-up
        sleep(5);

        //Make sure the connection is up
        return $this->isUp($type) !== false;
    }

    public function stopScript($type) {
        if(in_array($type, $this->validTypes) === false) {
            return false;
        }

        if($this->isUp($type) === false) {
            return true;
        }

        //Close the screen session
        exec("screen -X -S $type quit");

        //Make sure the connection isn't still up
        return $this->isUp($type) === false;
    }


    public function generateConfigFile($values) {
        //Add a header to the config file
        $new_config  = "#\n";
        $new_config .= "# DO NOT MANUALLY EDIT THIS FILE - THIS FILE IS AUTOMATICALLY GENERATED \n";
        $new_config .= "# GENERATED AT: ".date("d-m-Y H:i:s")." (UTC) \n";
        $new_config .= "#\n\n";

        //Replace the fields in the template with their respective values
        $new_config .= str_replace(
                            array_keys($values),
                            array_values($values),
                            file_get_contents($this->liquidsoapDirectory . 'config.template'));

        //Save the config data
        file_put_contents($this->liquidsoapDirectory . 'config.liq', $new_config);
    }
}
